using System;
using System.Threading.Tasks;

namespace StateMachineSpecs
{
    public abstract class LicenseState
    {
        public static readonly LicenseState NoLicense = new NoLicense_();
        public static readonly LicenseState NotRegistered = new NotRegistered_();
        public static readonly LicenseState DemoRegistered = new DemoRegistered_();
        public static readonly LicenseState CommunityRegistered = new CommunityRegistered_();
        public static readonly LicenseState Full = new Full_();

        public class NoLicense_ : LicenseState
        {
            public NoLicense_() : base(UnionCases.NoLicense)
            {
            }

            public LicenseState.NotRegistered_ DemoLicenseFound()
            {
                return new LicenseState.NotRegistered_();
            }

            public LicenseState.NotRegistered_ DemoLicenseFound(LicenseTrigger.DemoLicenseFound_ parameters)
            {
                return DemoLicenseFound();
            }

            public LicenseState.Full_ FullLicenseFound()
            {
                return new LicenseState.Full_();
            }

            public LicenseState.Full_ FullLicenseFound(LicenseTrigger.FullLicenseFound_ parameters)
            {
                return FullLicenseFound();
            }
        }

        public class NotRegistered_ : LicenseState
        {
            public NotRegistered_() : base(UnionCases.NotRegistered)
            {
            }

            public LicenseState.Full_ FullLicenseFound()
            {
                return new LicenseState.Full_();
            }

            public LicenseState.Full_ FullLicenseFound(LicenseTrigger.FullLicenseFound_ parameters)
            {
                return FullLicenseFound();
            }

            public LicenseState.NotRegistered_ DemoLicenseFound()
            {
                return new LicenseState.NotRegistered_();
            }

            public LicenseState.NotRegistered_ DemoLicenseFound(LicenseTrigger.DemoLicenseFound_ parameters)
            {
                return DemoLicenseFound();
            }

            public LicenseState.DemoRegistered_ DemoRegistered()
            {
                return new LicenseState.DemoRegistered_();
            }

            public LicenseState.DemoRegistered_ DemoRegistered(LicenseTrigger.DemoRegistered_ parameters)
            {
                return DemoRegistered();
            }
        }

        public class DemoRegistered_ : LicenseState
        {
            public DemoRegistered_() : base(UnionCases.DemoRegistered)
            {
            }

            public LicenseState.CommunityRegistered_ CommunityRegistered()
            {
                return new LicenseState.CommunityRegistered_();
            }

            public LicenseState.CommunityRegistered_ CommunityRegistered(LicenseTrigger.CommunityRegistered_ parameters)
            {
                return CommunityRegistered();
            }

            public LicenseState.DemoRegistered_ DemoLicenseFound()
            {
                return new LicenseState.DemoRegistered_();
            }

            public LicenseState.DemoRegistered_ DemoLicenseFound(LicenseTrigger.DemoLicenseFound_ parameters)
            {
                return DemoLicenseFound();
            }

            public LicenseState.Full_ FullLicenseFound()
            {
                return new LicenseState.Full_();
            }

            public LicenseState.Full_ FullLicenseFound(LicenseTrigger.FullLicenseFound_ parameters)
            {
                return FullLicenseFound();
            }
        }

        public class CommunityRegistered_ : LicenseState
        {
            public CommunityRegistered_() : base(UnionCases.CommunityRegistered)
            {
            }

            public LicenseState.Full_ FullLicenseFound()
            {
                return new LicenseState.Full_();
            }

            public LicenseState.Full_ FullLicenseFound(LicenseTrigger.FullLicenseFound_ parameters)
            {
                return FullLicenseFound();
            }

            public LicenseState.CommunityRegistered_ DemoLicenseFound()
            {
                return new LicenseState.CommunityRegistered_();
            }

            public LicenseState.CommunityRegistered_ DemoLicenseFound(LicenseTrigger.DemoLicenseFound_ parameters)
            {
                return DemoLicenseFound();
            }
        }

        public class Full_ : LicenseState
        {
            public Full_() : base(UnionCases.Full)
            {
            }

            public LicenseState.Full_ FullLicenseFound()
            {
                return new LicenseState.Full_();
            }

            public LicenseState.Full_ FullLicenseFound(LicenseTrigger.FullLicenseFound_ parameters)
            {
                return FullLicenseFound();
            }
        }

        internal enum UnionCases
        {
            NoLicense,
            NotRegistered,
            DemoRegistered,
            CommunityRegistered,
            Full
        }

        internal UnionCases UnionCase { get; }
        LicenseState(UnionCases unionCase) => UnionCase = unionCase;

        public override string ToString() => Enum.GetName(typeof(UnionCases), UnionCase) ?? UnionCase.ToString();
        bool Equals(LicenseState other) => UnionCase == other.UnionCase;

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((LicenseState)obj);
        }

        public override int GetHashCode() => (int)UnionCase;
    }

    public abstract class LicenseTrigger
    {
        public static readonly LicenseTrigger DemoLicenseFound = new DemoLicenseFound_();
        public static readonly LicenseTrigger FullLicenseFound = new FullLicenseFound_();
        public static readonly LicenseTrigger DemoRegistered = new DemoRegistered_();
        public static readonly LicenseTrigger CommunityRegistered = new CommunityRegistered_();

        public class DemoLicenseFound_ : LicenseTrigger
        {
            public DemoLicenseFound_() : base(UnionCases.DemoLicenseFound)
            {
            }
        }

        public class FullLicenseFound_ : LicenseTrigger
        {
            public FullLicenseFound_() : base(UnionCases.FullLicenseFound)
            {
            }
        }

        public class DemoRegistered_ : LicenseTrigger
        {
            public DemoRegistered_() : base(UnionCases.DemoRegistered)
            {
            }
        }

        public class CommunityRegistered_ : LicenseTrigger
        {
            public CommunityRegistered_() : base(UnionCases.CommunityRegistered)
            {
            }
        }

        internal enum UnionCases
        {
            DemoLicenseFound,
            FullLicenseFound,
            DemoRegistered,
            CommunityRegistered
        }

        internal UnionCases UnionCase { get; }
        LicenseTrigger(UnionCases unionCase) => UnionCase = unionCase;

        public override string ToString() => Enum.GetName(typeof(UnionCases), UnionCase) ?? UnionCase.ToString();
        bool Equals(LicenseTrigger other) => UnionCase == other.UnionCase;

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((LicenseTrigger)obj);
        }

        public override int GetHashCode() => (int)UnionCase;
    }

    public abstract class LicenseTransitionResult
    {
    }

    public class LicenseTransition : LicenseTransitionResult
    {
        public LicenseState Source { get; }
        public LicenseState Destination { get; }
        public LicenseTrigger Trigger { get; }

        public LicenseTransition(LicenseState source, LicenseState destination, LicenseTrigger trigger)
        {
            Source = source; Destination = destination; Trigger = trigger;
        }
    }

    public class LicenseInvalidTrigger : LicenseTransitionResult
    {
        public LicenseState Source { get; }
        public LicenseTrigger Trigger { get; }

        public LicenseInvalidTrigger(LicenseState source, LicenseTrigger trigger)
        {
            Source = source; Trigger = trigger;
        }
    }

    public static class LicenseExtension
    {
        public static LicenseState Apply(this LicenseState license, LicenseTrigger parameter)
        {
            switch (license.UnionCase)
            {
                case LicenseState.UnionCases.NoLicense:
                    {
                        switch (parameter.UnionCase)
                        {
                            case LicenseTrigger.UnionCases.DemoLicenseFound:
                                return ((LicenseState.NoLicense_)license).DemoLicenseFound((LicenseTrigger.DemoLicenseFound_)parameter);
                            case LicenseTrigger.UnionCases.FullLicenseFound:
                                return ((LicenseState.NoLicense_)license).FullLicenseFound((LicenseTrigger.FullLicenseFound_)parameter);
                            default:
                                return license;
                        }
                    }

                case LicenseState.UnionCases.NotRegistered:
                    {
                        switch (parameter.UnionCase)
                        {
                            case LicenseTrigger.UnionCases.FullLicenseFound:
                                return ((LicenseState.NotRegistered_)license).FullLicenseFound((LicenseTrigger.FullLicenseFound_)parameter);
                            case LicenseTrigger.UnionCases.DemoLicenseFound:
                                return ((LicenseState.NotRegistered_)license).DemoLicenseFound((LicenseTrigger.DemoLicenseFound_)parameter);
                            case LicenseTrigger.UnionCases.DemoRegistered:
                                return ((LicenseState.NotRegistered_)license).DemoRegistered((LicenseTrigger.DemoRegistered_)parameter);
                            default:
                                return license;
                        }
                    }

                case LicenseState.UnionCases.DemoRegistered:
                    {
                        switch (parameter.UnionCase)
                        {
                            case LicenseTrigger.UnionCases.CommunityRegistered:
                                return ((LicenseState.DemoRegistered_)license).CommunityRegistered((LicenseTrigger.CommunityRegistered_)parameter);
                            case LicenseTrigger.UnionCases.DemoLicenseFound:
                                return ((LicenseState.DemoRegistered_)license).DemoLicenseFound((LicenseTrigger.DemoLicenseFound_)parameter);
                            case LicenseTrigger.UnionCases.FullLicenseFound:
                                return ((LicenseState.DemoRegistered_)license).FullLicenseFound((LicenseTrigger.FullLicenseFound_)parameter);
                            default:
                                return license;
                        }
                    }

                case LicenseState.UnionCases.CommunityRegistered:
                    {
                        switch (parameter.UnionCase)
                        {
                            case LicenseTrigger.UnionCases.FullLicenseFound:
                                return ((LicenseState.CommunityRegistered_)license).FullLicenseFound((LicenseTrigger.FullLicenseFound_)parameter);
                            case LicenseTrigger.UnionCases.DemoLicenseFound:
                                return ((LicenseState.CommunityRegistered_)license).DemoLicenseFound((LicenseTrigger.DemoLicenseFound_)parameter);
                            default:
                                return license;
                        }
                    }

                case LicenseState.UnionCases.Full:
                    {
                        switch (parameter.UnionCase)
                        {
                            case LicenseTrigger.UnionCases.FullLicenseFound:
                                return ((LicenseState.Full_)license).FullLicenseFound((LicenseTrigger.FullLicenseFound_)parameter);
                            default:
                                return license;
                        }
                    }

                default:
                    throw new ArgumentException($"Unknown type implementing LicenseState: {license.GetType().Name}");
            }
        }

        public static LicenseTransitionResult DoTransition(this LicenseState license, LicenseTrigger parameter)
        {
            switch (license.UnionCase)
            {
                case LicenseState.UnionCases.NoLicense:
                    {
                        switch (parameter.UnionCase)
                        {
                            case LicenseTrigger.UnionCases.DemoLicenseFound:
                                return new LicenseTransition(license, ((LicenseState.NoLicense_)license).DemoLicenseFound((LicenseTrigger.DemoLicenseFound_)parameter), parameter);
                            case LicenseTrigger.UnionCases.FullLicenseFound:
                                return new LicenseTransition(license, ((LicenseState.NoLicense_)license).FullLicenseFound((LicenseTrigger.FullLicenseFound_)parameter), parameter);
                            default:
                                return new LicenseInvalidTrigger(license, parameter);
                        }
                    }

                case LicenseState.UnionCases.NotRegistered:
                    {
                        switch (parameter.UnionCase)
                        {
                            case LicenseTrigger.UnionCases.FullLicenseFound:
                                return new LicenseTransition(license, ((LicenseState.NotRegistered_)license).FullLicenseFound((LicenseTrigger.FullLicenseFound_)parameter), parameter);
                            case LicenseTrigger.UnionCases.DemoLicenseFound:
                                return new LicenseTransition(license, ((LicenseState.NotRegistered_)license).DemoLicenseFound((LicenseTrigger.DemoLicenseFound_)parameter), parameter);
                            case LicenseTrigger.UnionCases.DemoRegistered:
                                return new LicenseTransition(license, ((LicenseState.NotRegistered_)license).DemoRegistered((LicenseTrigger.DemoRegistered_)parameter), parameter);
                            default:
                                return new LicenseInvalidTrigger(license, parameter);
                        }
                    }

                case LicenseState.UnionCases.DemoRegistered:
                    {
                        switch (parameter.UnionCase)
                        {
                            case LicenseTrigger.UnionCases.CommunityRegistered:
                                return new LicenseTransition(license, ((LicenseState.DemoRegistered_)license).CommunityRegistered((LicenseTrigger.CommunityRegistered_)parameter), parameter);
                            case LicenseTrigger.UnionCases.DemoLicenseFound:
                                return new LicenseTransition(license, ((LicenseState.DemoRegistered_)license).DemoLicenseFound((LicenseTrigger.DemoLicenseFound_)parameter), parameter);
                            case LicenseTrigger.UnionCases.FullLicenseFound:
                                return new LicenseTransition(license, ((LicenseState.DemoRegistered_)license).FullLicenseFound((LicenseTrigger.FullLicenseFound_)parameter), parameter);
                            default:
                                return new LicenseInvalidTrigger(license, parameter);
                        }
                    }

                case LicenseState.UnionCases.CommunityRegistered:
                    {
                        switch (parameter.UnionCase)
                        {
                            case LicenseTrigger.UnionCases.FullLicenseFound:
                                return new LicenseTransition(license, ((LicenseState.CommunityRegistered_)license).FullLicenseFound((LicenseTrigger.FullLicenseFound_)parameter), parameter);
                            case LicenseTrigger.UnionCases.DemoLicenseFound:
                                return new LicenseTransition(license, ((LicenseState.CommunityRegistered_)license).DemoLicenseFound((LicenseTrigger.DemoLicenseFound_)parameter), parameter);
                            default:
                                return new LicenseInvalidTrigger(license, parameter);
                        }
                    }

                case LicenseState.UnionCases.Full:
                    {
                        switch (parameter.UnionCase)
                        {
                            case LicenseTrigger.UnionCases.FullLicenseFound:
                                return new LicenseTransition(license, ((LicenseState.Full_)license).FullLicenseFound((LicenseTrigger.FullLicenseFound_)parameter), parameter);
                            default:
                                return new LicenseInvalidTrigger(license, parameter);
                        }
                    }

                default:
                    throw new ArgumentException($"Unknown type implementing LicenseState: {license.GetType().Name}");
            }
        }
    }
}