
using System;

namespace Test
{
    //fake Option class to avoid real FunicularSwitch reference in Test
    public class Option<T>
    {
        public T1 Match<T1>(Func<T, T1> some, Func<T1> none) => throw new NotImplementedException();
    }

    public class Parent
    {
        public class Child
        {
            public string Prop1 { get; }
            public bool Prop2 { get; }

            public Child(string prop1, bool prop2)
            {
                Prop1 = prop1;
                Prop2 = prop2;
            }
        }
    }
    public static class ParentChildWithExtension
    {
        public static Parent.Child With(this Parent.Child child, Option<string> prop1 = null, Option<bool> prop2 = null) => new Parent.Child(prop1: prop1 != null ? prop1.Match(x => x, () => child.Prop1) : child.Prop1, prop2: prop2 != null ? prop2.Match(x => x, () => child.Prop2) : child.Prop2);
    }
}